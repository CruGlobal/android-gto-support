import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    // define dependency versions for this project
    ext.deps = [
            advrecyclerview     : '1.0.0',
            crashlytics         : '2.10.1',
            eventbus            : '3.1.1',
            facebookFlipper     : '0.34.0',
            facebookStetho      : '1.5.1',
            gradleAndroidPlugin : '3.6.1',
            gson                : '2.8.6',
            guava               : '28.2-android',
            hamcrest            : '2.2',
            jacoco              : '0.8.5',
            jetbrainsAnnotations: '19.0.0',
            jsonUnit            : '1.31.1',
            junit               : '4.13',
            kotlin              : '1.3.70',
            kotlinCoroutines    : '1.3.5',
            leakcanary2         : '2.2',
            lightweightStream   : '1.2.1',
            materialDesign      : '1.1.0',
            mockito             : '3.3.3',
            mockitoKotlin       : '2.1.0',
            okhttp3             : '3.12.8',
            picasso             : '2.71828',
            powermock           : '2.0.5',
            realm               : '6.1.0',
            realmAdapters       : '4.0.0',
            retrofit2           : '2.6.2',
            robolectric         : '4.3.1',
            snowplow            : '1.4.0',
            thekey              : '3.0.0',
            timber              : '4.7.1'
    ]
    ext.deps.androidX = [
            annotation           : '1.1.0',
            appCompat            : '1.1.0',
            arch                 : '2.1.0',
            collection           : '1.1.0',
            core                 : '1.2.0',
            databinding          : deps.gradleAndroidPlugin,
            fragment             : '1.2.3',
            lifecycle            : '2.2.0',
            loader               : '1.1.0',
            localBroadcastManager: '1.0.0',
            recyclerView         : '1.1.0',
            room                 : '2.2.5',
            swipeRefreshLayout   : '1.0.0',
            test                 : '1.2.0',
            testJUnit            : '1.1.1',
            viewPager            : '1.0.0',
            viewPager2           : '1.0.0',
    ]
    ext.deps.firebase = [
            crashlytics: '17.0.0-beta01'
    ]

    repositories {
        google()
        jcenter()
        mavenLocal()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${deps.gradleAndroidPlugin}"
        classpath 'com.dicedmelon.gradle:jacoco-android:0.1.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"
    }
}
plugins {
    id 'digital.wup.android-maven-publish' version '3.6.3' apply false
    id 'org.jlleitschuh.gradle.ktlint' version '9.2.1'
}

subprojects {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    group 'org.ccci.gto.android'
    version '3.4.0-SNAPSHOT'

    repositories {
        google()
        maven { url 'https://maven.fabric.io/public' }
        jcenter()
        maven { url "https://jitpack.io" }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/' }
        mavenLocal()
    }

    beforeEvaluate {
        android {
            compileSdkVersion 29

            defaultConfig {
                minSdkVersion 16
                targetSdkVersion 29

                consumerProguardFiles "$rootProject.projectDir/proguard-consumer-jetbrains.pro"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            adbOptions {
               timeOutInMs 600000
            }
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            dexOptions {
                preDexLibraries !project.hasProperty('disablePreDex')
            }
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8.toString()
                freeCompilerArgs += '-Xjvm-default=enable'
            }
            testOptions {
                unitTests {
                    includeAndroidResources = true
                }
            }
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}"

            compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
            compileOnly "org.jetbrains:annotations:${deps.jetbrainsAnnotations}"

            androidTestImplementation "androidx.test:runner:${deps.androidX.test}"
            androidTestImplementation "androidx.test:rules:${deps.androidX.test}"
            androidTestImplementation "androidx.test.ext:junit:${deps.androidX.testJUnit}"
            androidTestImplementation "org.hamcrest:hamcrest-library:${deps.hamcrest}"

            testImplementation "androidx.test.ext:junit:${deps.androidX.testJUnit}"
            testImplementation "junit:junit:${deps.junit}"
            testImplementation "org.robolectric:robolectric:${deps.robolectric}"
        }

        configurations.all {
            resolutionStrategy {
                force "androidx.annotation:annotation:${deps.androidX.annotation}"
                force "androidx.arch.core:core-common:${deps.androidX.arch}"
                force "androidx.collection:collection:${deps.androidX.collection}"
                force "androidx.core:core:${deps.androidX.core}"
                force "androidx.lifecycle:lifecycle-runtime:${deps.androidX.lifecycle}"
                force "junit:junit:${deps.junit}"
                force "org.jetbrains:annotations:${deps.jetbrainsAnnotations}"

                dependencySubstitution {
                    substitute module('org.hamcrest:hamcrest-core') with module("org.hamcrest:hamcrest:${deps.hamcrest}")
                    substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}")
                }
            }
        }
    }

    // configure checkstyle
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '7.8.2'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        project.tasks.findByName("check")?.dependsOn('checkstyle')
    }

    // configure ktlint
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }

    // configure jacoco
    apply plugin: 'jacoco-android'
    jacoco {
        toolVersion = deps.jacoco
    }
    android.testOptions.unitTests.all {
        jacoco.includeNoLocationClasses = true
    }

    // configure publishing
    apply plugin: 'digital.wup.android-maven-publish'
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
    }
    publishing {
        publications {
            release(MavenPublication) {
                from components.android
                pom.withXml {
                    def scm = asNode().appendNode('scm')
                    scm.appendNode('connection', POM_SCM_CONNECTION)
                    scm.appendNode('developerConnection', POM_SCM_CONNECTION)
                }

                artifact sourcesJar {
                    classifier 'sources'
                }
            }
        }
        repositories {
            maven {
                if (project.version.endsWith('-SNAPSHOT')) {
                    url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-snapshots-local/"
                } else {
                    url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-releases-local/"
                }

                credentials {
                    username cruGlobalMavenRepositoryUsername
                    password cruGlobalMavenRepositoryPassword
                }
            }
        }
    }
}
