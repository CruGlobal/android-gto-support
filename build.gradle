import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    // define dependency versions for this project
    ext.deps = [
            advrecyclerview     : '1.0.0',
            dagger              : '2.37',
            eventbus            : '3.2.0',
            facebookFlipper     : '0.96.1',
            gradleAndroidPlugin : '4.2.2',
            gson                : '2.8.6',
            guava               : '30.1.1-android',
            hamcrest            : '2.2',
            jacoco              : '0.8.7',
            jetbrainsAnnotations: '21.0.1',
            json                : '20210307',
            jsonUnit            : '2.27.0',
            junit               : '4.13.2',
            junitParams         : '1.1.1',
            kotlin              : '1.5.10',
            kotlinCoroutines    : '1.5.0',
            leakcanary2         : '2.7',
            lightweightStream   : '1.2.2',
            lottie              : '3.7.1',
            materialDesign      : '1.3.0',
            mockito             : '3.11.2',
            mockitoKotlin       : '2.2.0',
            moshi               : '1.12.0',
            okhttp3             : '4.9.1',
            okio                : '2.10.0',
            okta                : '1.0.16',
            picasso             : '2.8',
            playCore            : '1.8.3',
            powermock           : '2.0.9',
            realm               : '10.6.1',
            realmAdapters       : '4.0.0',
            retrofit2           : '2.9.0',
            robolectric         : '4.6.1',
            scarlet             : '0.1.12',
            snowplow            : '2.1.1',
            thekey              : '4.0.0',
            timber              : '4.7.1',
            weakDelegate        : '1.0.1'
    ]
    ext.deps.androidX = [
            annotation           : '1.2.0',
            appCompat            : '1.2.0',
            arch                 : '2.1.0',
            collection           : '1.1.0',
            concurrent           : '1.1.0',
            core                 : '1.3.2',
            databinding          : deps.gradleAndroidPlugin,
            drawerLayout         : '1.1.1',
            fragment             : '1.2.5',
            lifecycle            : '2.3.0',
            loader               : '1.1.0',
            localBroadcastManager: '1.0.0',
            recyclerView         : '1.1.0',
            room                 : '2.2.5',
            sqlite               : '2.1.0',
            swipeRefreshLayout   : '1.1.0',
            test                 : '1.4.0',
            testJUnit            : '1.1.3',
            viewPager            : '1.0.0',
            viewPager2           : '1.0.0',
            work                 : '2.4.0',
    ]
    ext.deps.firebase = [
            crashlytics: '17.3.0'
    ]

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:${deps.gradleAndroidPlugin}"
        classpath "com.google.dagger:hilt-android-gradle-plugin:${deps.dagger}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${deps.kotlin}"
    }
}
plugins {
    id "com.vanniktech.android.junit.jacoco" version "0.16.0"
    id 'org.jlleitschuh.gradle.ktlint' version '10.1.0' apply false
}

configure(subprojects.findAll { it.path.contains("gto-support") }) {
    apply plugin: 'com.android.library'
    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-kapt'

    group 'org.ccci.gto.android'
    version '3.9.0-SNAPSHOT'

    repositories {
        maven {
            url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/'
            content { includeGroup 'me.thekey.android' }
        }
        maven {
            url 'https://jitpack.io'
            content { includeGroupByRegex 'com\\.github\\..*' }
        }
        google()
        mavenCentral()
        jcenter()
    }

    beforeEvaluate {
        android {
            compileSdkVersion 30

            defaultConfig {
                minSdkVersion 21
                targetSdkVersion 30

                consumerProguardFiles "$rootProject.projectDir/proguard-consumer-jetbrains.pro"

                testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            }

            adbOptions {
               timeOutInMs 600000
            }
            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }
            dexOptions {
                preDexLibraries !project.hasProperty('disablePreDex')
            }
            kotlinOptions {
                jvmTarget = JavaVersion.VERSION_1_8.toString()
                freeCompilerArgs += '-Xjvm-default=all'
            }
            testOptions {
                unitTests {
                    includeAndroidResources = true

                    all {
                        // increase unit tests max heap size
                        jvmArgs "-Xmx2g"

                        // enable only SDKs we actually support in robolectric
                        // TODO: SDK >= 29 requires Java 9 which we don't currently support
                        systemProperty 'robolectric.enabledSdks', (android.defaultConfig.minSdkVersion.apiLevel..28).join(" ")
                    }
                }
            }
        }

        dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}"

            compileOnly "androidx.annotation:annotation:${deps.androidX.annotation}"
            compileOnly "org.jetbrains:annotations:${deps.jetbrainsAnnotations}"

            androidTestImplementation "androidx.test:runner:${deps.androidX.test}"
            androidTestImplementation "androidx.test:rules:${deps.androidX.test}"
            androidTestImplementation "androidx.test.ext:junit:${deps.androidX.testJUnit}"
            androidTestImplementation "org.hamcrest:hamcrest-library:${deps.hamcrest}"

            testImplementation "androidx.test.ext:junit:${deps.androidX.testJUnit}"
            testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:${deps.mockitoKotlin}"
            testImplementation "junit:junit:${deps.junit}"
            testImplementation "org.mockito:mockito-inline:${deps.mockito}"
            testImplementation "org.robolectric:robolectric:${deps.robolectric}"
        }

        configurations.all {
            resolutionStrategy {
                force "androidx.annotation:annotation:${deps.androidX.annotation}"
                force "androidx.arch.core:core-common:${deps.androidX.arch}"
                force "androidx.collection:collection:${deps.androidX.collection}"
                force "androidx.core:core:${deps.androidX.core}"
                force "androidx.lifecycle:lifecycle-runtime:${deps.androidX.lifecycle}"
                force "androidx.lifecycle:lifecycle-viewmodel-savedstate:${deps.androidX.lifecycle}"
                force "com.squareup.okio:okio:${deps.okio}"
                force "junit:junit:${deps.junit}"
                force "org.jetbrains:annotations:${deps.jetbrainsAnnotations}"

                dependencySubstitution {
                    substitute module('org.jetbrains.kotlin:kotlin-stdlib-jdk8') with module("org.jetbrains.kotlin:kotlin-stdlib-jdk7:${deps.kotlin}")

                    // use the new condensed version of hamcrest
                    substitute module('org.hamcrest:hamcrest-core') with module("org.hamcrest:hamcrest:${deps.hamcrest}")
                    substitute module('org.hamcrest:hamcrest-library') with module("org.hamcrest:hamcrest:${deps.hamcrest}")
                }
            }
        }
    }

    // configure checkstyle
    apply plugin: 'checkstyle'
    checkstyle {
        toolVersion '7.8.2'
    }
    task checkstyle(type: Checkstyle) {
        configFile rootProject.file('config/checkstyle/checkstyle.xml')
        source 'src'
        include '*/java/**/*.java'
        ignoreFailures false
        showViolations true

        classpath = files()
    }
    afterEvaluate {
        project.tasks.findByName("check")?.dependsOn('checkstyle')
    }

    // configure ktlint
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }

    // configure publishing
    apply plugin: 'maven-publish'
    task sourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
    }
    afterEvaluate {
        publishing {
            publications {
                release(MavenPublication) {
                    from components.release

                    groupId = project.group
                    artifactId = project.name
                    version = project.version

                    pom.withXml {
                        def scm = asNode().appendNode('scm')
                        scm.appendNode('connection', POM_SCM_CONNECTION)
                        scm.appendNode('developerConnection', POM_SCM_CONNECTION)
                    }

                    artifact sourcesJar {
                        classifier 'sources'
                    }
                }
            }
            repositories {
                maven {
                    if (project.version.endsWith('-SNAPSHOT')) {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-snapshots-local/"
                    } else {
                        url "https://cruglobal.jfrog.io/cruglobal/list/maven-cru-android-public-releases-local/"
                    }

                    credentials {
                        username cruGlobalMavenRepositoryUsername
                        password cruGlobalMavenRepositoryPassword
                    }
                }
            }
        }
    }
}

// jacoco config
junitJacoco {
    jacocoVersion = deps.jacoco
    includeNoLocationClasses = true
}
task jacocoTestReport {
    subprojects.each { dependsOn(it.tasks.withType(JacocoReport)) }
}
allprojects {
    if (gradle.startParameter.excludedTaskNames.contains("test")) {
        // exclude all test type tasks when the test task is excluded
        tasks.withType(Test).all { gradle.startParameter.excludedTaskNames += it.name }
    }
}
