import org.jlleitschuh.gradle.ktlint.reporter.ReporterType

buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.dagger.hilt.androidGradle
    }
}
plugins {
    alias(libs.plugins.junitJacoco)
    alias(libs.plugins.ktlint) apply false
}

allprojects {
    repositories {
        maven {
            url 'https://cruglobal.jfrog.io/cruglobal/list/maven-locals/'
            content { includeGroup 'me.thekey.android' }
        }
        maven {
            url 'https://jitpack.io'
            content { includeGroupByRegex 'com\\.github\\..*' }
        }
        google()
        mavenCentral()
        jcenter {
            content { includeModule 'io.realm', 'android-adapters' }
        }
    }

    CheckstyleConfigurationKt.configureCheckstyle(project, libs.versions.checkstyle.get())
}

configure(subprojects.findAll { it.path.contains("gto-support") }) {
    version '3.9.2-SNAPSHOT'

    afterEvaluate {
        dependencies {
            implementation libs.kotlin.stdlib

            compileOnly libs.androidx.annotation

            testImplementation libs.androidx.test.junit
            testImplementation libs.junit
            testImplementation libs.mockito
            testImplementation libs.mockitoKotlin
            testImplementation libs.robolectric
        }
    }

    configurations.all {
        resolutionStrategy {
            force "androidx.annotation:annotation:${libs.versions.androidx.annotation.get()}"
            force "androidx.core:core:${libs.versions.androidx.core.get()}"
            force "com.squareup.okio:okio:${libs.versions.okio.get()}"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${libs.versions.kotlin.get()}"
            force "org.jetbrains.kotlinx:kotlinx-coroutines-core:${libs.versions.kotlinCoroutines.get()}"

            dependencySubstitution {
                // use the new condensed version of hamcrest
                substitute module('org.hamcrest:hamcrest-core') with module("org.hamcrest:hamcrest:${libs.versions.hamcrest.get()}")
                substitute module('org.hamcrest:hamcrest-library') with module("org.hamcrest:hamcrest:${libs.versions.hamcrest.get()}")
            }
        }
    }

    // configure ktlint
    apply plugin: "org.jlleitschuh.gradle.ktlint"
    ktlint {
        android = true
        reporters {
            reporter(ReporterType.PLAIN_GROUP_BY_FILE)
            reporter(ReporterType.CHECKSTYLE)
        }
    }
}

// jacoco config
junitJacoco {
    jacocoVersion = libs.versions.jacoco.get()
    includeNoLocationClasses = true
}
allprojects {
    afterEvaluate {
        tasks.withType(Test) {
            jacoco.excludes = ['jdk.internal.*']
        }
    }
}
task jacocoTestReport {
    subprojects.each { dependsOn(it.tasks.withType(JacocoReport)) }
}
allprojects {
    if (gradle.startParameter.excludedTaskNames.contains("test")) {
        // exclude all test type tasks when the test task is excluded
        tasks.withType(Test).all { gradle.startParameter.excludedTaskNames += it.name }
    }
}
